<% use_session ||= false
   # This partial will only use the session store features as its results if use_session is true
   # and the session[:search] variables aren't blank
   if use_session && !session[:search][:page].blank?
     # Create a "fake" WillPaginate collection that has the same properties as a Feature collection would
     pagination_collection = WillPaginate::Collection.new(session[:search][:page], session[:search][:per_page], session[:search][:total_entries])  
     # This is necessary for calculations involving Collection.length to be correct
     pagination_collection.replace(features)
     search_params = session[:search][:params]
     # Otherwise, just use the actual Feature collection in will_paginate
   else
     pagination_collection = features
	 search_params = params
   end 
   if !features.nil? && features.size > 0 %>
   <div class="table-responsive">
     <table class="table table-condensed table-results">
	 <tbody>
  	 <thead>
       <tr>
         <th colspan="2" class="pagination-info-cell">
<%=      page_entries_info pagination_collection %>
       </th>
       </tr>
       <tr>
         <td colspan="2" class="pagination-cell">
<%=      javascript_on_load do %>
	       links = jQuery('#NodeSearchResults .pagination a')
           links.attr('data-remote', true);
           links.bind('ajax:beforeSend', function(){ $("#NodeSearchResults").html('<%= image_tag('interface_utils/ajax-loader.gif') %>'); });
<%       end %>
<%=      will_paginate pagination_collection, :params => search_params.merge({:action => 'search', :controller => 'features'}) %>
         </td>
       </tr>
       <tr>
         <th><%= FeatureName.model_name.human(:count => :many).titleize.s %></th>
         <th><%= Feature.human_attribute_name(:object_type).s %></th>
       </tr>
     </thead>
<%     features.each do |f|
         caption = f.caption 
         caption_str = caption.nil? ? nil : caption.content.strip_tags %>
       <tr class="featureRow" id="feature_<%= f.id %>">
         <td class="leftText">
<%=      link_to h(feature_name_header(f)).s, feature_path(f.fid), :title => caption_str %>
         </td>
         <td class="leftText"><%=h f.object_types.first.header rescue '' %></td>
       </tr>
<%     end %>
       <tr>
         <td colspan="2" style="padding:0.5em;" class="pagination-cell">
<%=      will_paginate pagination_collection, :params => search_params.merge({:action => 'search', :controller => 'features'}) %>
         </td>
       </tr>
       </tbody>
     </table>
   </div>
<% else %>
   <p><%= ts 'found.none.records', :what => Feature.model_name.human(:count => :many) %></p>
<% end %>