<script type="text/javascript">
jQuery(document).ready(function(){
  
  // Ajaxify the pagination for lists of features
  jQuery('.has-ajax-pagination .pagination a').live('click', function() {
    var this_link = this;
    jQuery.ajax({
      type: 'POST',
      url: this.href,
      success: function(html){
        jQuery(this_link).parents('.pagination-click-results:first').html(html);
      }
    });
    return false;
  });

  // Since clicking on links of the form "/features#59" would normally just change the url
  // hash and not change the page content, we need to send these links to NodeTree.showNode(id),
  // which opens up the specified feature. 
  jQuery('.has-hash-feature-links a[href*=features#]').live('click', function(){
    var id = this.href.match(/features#([\d]+)$/);
    if(id){
      id = id[1];
      NodeTree.showNode(id);
    }
    return true;
  });
});
</script>

<% feature_label = f_label(@feature) %>
<% relation_counts = CachedFeatureRelationCategory.find(:all, :select => "feature_relation_type_id, feature_is_parent, COUNT(DISTINCT related_feature_id) AS count", :group => "feature_relation_type_id, feature_is_parent", :conditions => {:feature_id => @feature.id}, :order => :feature_relation_type_id) %>

<% if relation_counts.length > 0 %>
<div class="has-ajax-pagination has-hash-feature-links">
<% relation_counts.each do |rc| %>

  <%
	feature_relation_type = FeatureRelationType.find(rc[:feature_relation_type_id])
	feature_is_parent = rc[:feature_is_parent]
	count = rc[:count]
  %>

  <h3><%= feature_label %> <%= "#{feature_is_parent ? feature_relation_type.label : feature_relation_type.asymmetric_label}" %> the following features (<%= count %>):</h3>
  <% # Is there a way to :include => categories and use an :order instead of this .sort{}? %>
  <% CachedFeatureRelationCategory.count(:all, :group => 'category_id', :conditions => {:feature_id => @feature.id, :feature_relation_type_id => feature_relation_type.id, :feature_is_parent => feature_is_parent}).sort{|a,b| Category.find(a[0]).title.casecmp(Category.find(b[0]).title)}.each do |c| %>
    <% category_id, count = c %>
    <% div_id = "list_#{category_id}_#{feature_relation_type.id}_#{feature_is_parent}" %>

    <p>
      <strong>
  	  <% if count == 1 %>
		<%= Category.find(category_id).title %>
	  <% else %>
  	    <%= link_to_remote Category.find(category_id).title, :url => {:action => :related_list, :id => @feature.id, :category_id => category_id, :feature_relation_type_id => feature_relation_type.id, :feature_is_parent => feature_is_parent.to_s}, :update => div_id,
        :before => "$('##{div_id}').toggle();if($('##{div_id}').css('display') == 'none'){return false};"
          %>
	  <% end %>
  	  </strong> (<%= count %>)
    </p>

	<% if count == 1 %>
	  <div id="<%= div_id %>"></div>
	  <% # Is there a way to render this action instead of inserting it with Ajax? %>
	  <%= javascript_tag remote_function(:update => div_id, :url => {:action => :related_list, :id => @feature.id, :category_id => category_id, :feature_relation_type_id => feature_relation_type.id, :feature_is_parent => feature_is_parent.to_s}) %>
	<% else %>
      <div id="<%= div_id %>" style="display:none;" class="pagination-click-results"></div>
	<% end %>
	
  <% end %>

<% end %>
</div>
<% else %>
<p>
  Sorry, this feature does not currently have any related features.
</p>
<% end %>
