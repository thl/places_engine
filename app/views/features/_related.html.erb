<%= javascript_on_load do %>
  // Ajaxify the pagination for lists of features
  jQuery('.has-ajax-pagination .pagination a').on('click', function() {
    var this_link = this;
    jQuery.ajax({
      type: 'POST',
      url: this.href,
      success: function(html){
        jQuery(this_link).parents('.pagination-click-results:first').html(html);
      }
    });
    return false;
  });

<% end %>
<script type="text/javascript">
// This is a switch that we can turn off when we "Expand/collapse all" to allow more than one
// Ajax div to be open at once.
var accordion_enabled = true;

function on_category_click(ajax_div_id){
  var ajax_div = $('#'+ajax_div_id);
  var link_parent = ajax_div.prev('p').find('a');
  var toggle_speed = 300;
  // This is used after ajax_div.toggle(), so it is the opposite of the current state.
  var is_hidden = !(ajax_div.css('display') == 'none');
  
  // Toggle the Ajax div
  ajax_div.toggle(toggle_speed);

  if(accordion_enabled){
    // Hide all of the other Ajax divs and switch their "expanded/contracted" state.
    $('.related-feature-list').not('#'+ajax_div_id)
      .hide(toggle_speed)
      .prev('p').find('a').removeClass('expandable-link-expanded').addClass('expandable-link-contracted');
  }

  // Change the Ajax div's "expanded/contracted" state.
  if(is_hidden){
  link_parent.removeClass('expandable-link-expanded').addClass('expandable-link-contracted');
  }else{
  link_parent.removeClass('expandable-link-contracted').addClass('expandable-link-expanded');
  }

  // If the ajax_div is now hidden, return false so that the Ajax isn't called again.
  if(is_hidden){
  return false;
  }
  return true;
}

function expand_all_categories(){
  accordion_enabled = false;
  $('.related-features-categories .expandable-link-contracted').click();
  accordion_enabled = true;
  $('.collapse-all-categories').show();
  $('.expand-all-categories').hide();
}

function collapse_all_categories(){
  accordion_enabled = false;
  $('.related-features-categories .expandable-link-expanded').click();
  accordion_enabled = true;
  $('.expand-all-categories').show();
  $('.collapse-all-categories').hide();
}
</script>
<%= javascript_on_load do %>
  var termIndex = "<%= Feature.config.url %>";
  var assetIndex = "<%= Flare.config.asset_url %>";
  var count = 0;
  var key =  "<%= Feature.uid_prefix %>-<%= @feature.fid %>";
  var relatedCountsUrl =
  termIndex + '/select?q={!child of=block_type:parent}id:' + key + '&wt=json&indent=true&group=true&group.field=block_child_type&group.limit=0&wt=json&json.wrf=?';
  $.ajax({
    type: "GET",
    url: relatedCountsUrl,
    dataType: "jsonp",
    timeout: 90000,
    error: function (e) {
      console.error(e);
    },
    beforeSend: function () {
    },

    success: function (data) {
      var updates = {};

      $.each(data.grouped.block_child_type.groups, function (x, y) {
      var block_child_type = y.groupValue;
      var rel_count = y.doclist.numFound;
      updates[block_child_type] = rel_count;
      });

      count = updates;
      $(".relatedCountContainer").each(function(){
          $(this).html(count["related_<%= Feature.uid_prefix %>"]);
      });
    }
  });
<% end %>

<%= javascript_on_load do %>
  //Code for Summary
  ;;;console.log("Going to start the Summary code");
  var termIndex = "<%= Feature.config.url %>";
  var assetIndex = "<%= Flare.config.asset_url %>";
  var domain = "<%= Feature.uid_prefix %>";
  var perspective = "<%= current_perspective.code %>";
  var SOLR_ROW_LIMIT = 200;
  var count = 0;
  var featureId =  "<%= Feature.uid_prefix %>-<%= @feature.fid %>";
  var featuresPath = "";
  var fieldList = [
    "header",
    "id",
    "ancestor*",
    "caption_eng",
    "related_"+domain+"_feature_type_s",
    "related_"+domain+"_relation_label_s"
  ].join(",");
  if(domain == "places"){
    fieldList += ",related_subjects_t";
  }
  var url = termIndex + "/select?" +
  "&q=" + "{!child of=block_type:parent}id:" + featureId +
  "&fl=child_count:[subquery],uid,related_"+domain+"_id_s,related_"+domain+"_header_s" +","+ fieldList +
  "&expand=true" +
  "&child_count.fq=related_kmaps_node_type:child" +
  "&child_count.fl=uid" +
  "&child_count.rows=" + "0" +
  "&child_count.q={!child of='block_type:parent'}{!term f=uid v=$row.related_"+domain+"_id_s}" +
  "&fq=related_kmaps_node_type:" + "child" +
  "&fq="+"{!collapse field=related_"+domain+"_id_s}" +
  "&limit=" + SOLR_ROW_LIMIT +
  "&indent=true" +
  "&wt=json" +
  "&json.wrf=?" +
  "&sort=related_"+domain+"_header_s+asc" +
  "&rows=" + SOLR_ROW_LIMIT;
  url = termIndex + "/select?" +
  "fl=uid,[child parentFilter=block_type:parent]&q=uid:" + featureId +
  "&limit=" + SOLR_ROW_LIMIT +
  "&indent=true" +
  "&wt=json" +
  "&json.wrf=?";
  ;;;console.log(url);
  $.ajax({
    url: url,
    dataType: 'jsonp',
    jsonp: 'json.wrf'
  }).done(function(data){
    ;;;console.log(data);
    const response = data.response;
    if(response.numFound > 0){
      const result = response.docs[0]["_childDocuments_"].reduce(function(acc,currentNode,index){
        ;;;console.log(currentNode["id"]);
        ;;;console.log(currentNode);
        ;;;console.log(currentNode["related_kmaps_node_type"]);
        let node_type = currentNode["related_kmaps_node_type"] ;
        if(node_type === undefined) {
          node_type = "other";
        }
        if(acc[node_type] === undefined){
          acc[node_type] =  [];
        }
        let relation_label = currentNode["related_"+ domain +"_relation_label_s"];
        if(acc[node_type][relation_label] === undefined){
          acc[node_type][relation_label] = [];
        }
        let related_feature_type = currentNode["related_"+ domain + "_feature_type_s"];
        if(acc[node_type][relation_label][related_feature_type] === undefined) {
          acc[node_type][relation_label][related_feature_type] = [];
        }
        acc[node_type][relation_label][related_feature_type].push(currentNode);
        return acc;
      }, []);
      ;;;console.log(result);
      function addSummaryItems(group_key,data,container){
        for(var key in data[group_key]){
          var feature_block = jQuery('<div></div>').addClass('feature-block');
          var header = jQuery('<h6></h6>').html(key);
          feature_block.append(header);
          var relation_list = jQuery('<ul></ul>');
          for(var relation_label in data[group_key][key]){
            var relation = jQuery('<li></li>');
            relation.append(relation_label);
            var feature_type_list = jQuery('<ul></ul>');
            for(var feature_type in data[group_key][key][relation_label]){
              var feature_type_item = jQuery('<li></li>');
              ;;;console.log("....");
              ;;;console.log(data[group_key][key][relation_label][feature_type]);
              feature_type_item.append(data[group_key][key][relation_label][feature_type]["related_"+domain+"_header_s"]);
              feature_type_list.append(feature_type_item);
            }
            relation.append(feature_type_list);
            relation_list.append(relation);
          }
          feature_block.append(relation_list);
          container.append(feature_block);
        }
      }
      addSummaryItems('parent',result,jQuery('.places-in-places'));
      addSummaryItems('child',result,jQuery('.places-in-places'));
      addSummaryItems('other',result,jQuery('.places-in-places'));
    } else {
     //Empty result set
    }
  });
<% end %>

<div id='myTabs'>
  <!-- Nav tabs -->
  <ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#relation_tree" aria-controls="profile" role="tab" data-toggle="tab">Relationships</a></li>
    <li role="presentation"><a id="summary-tab-link" href="#relation_details" aria-controls="home" role="tab" data-toggle="tab">Summary</a></li>
  </ul>
  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane active" id="relation_tree">
      <section class="panel panel-content">
        <div class="panel-body">
          <p>
          <% feature_label = fname_labels(@feature).s %>
          <strong><%= feature_label %></strong> has <strong class="relatedCountContainer"></strong> subordinate places, which you can see presented with its superordinate categories in the tree below. The summary tab instead classifies <%= feature_label %>'s immediately subordinate places, as well as places non-hierarchically related to it.
          </p>
            <div id='relation_tree_container'></div>
        </div> <!-- END panel-body -->
      </section> <!-- END panel -->
  </div>
    <div role="tabpanel" class="tab-pane" id="relation_details">
      <section class="panel panel-content">
        <div class="panel-body">
          <% relation_counts = CachedFeatureRelationCategory.select('feature_relation_type_id, feature_is_parent, COUNT(DISTINCT related_feature_id) AS count').group('feature_relation_type_id, feature_is_parent').where(:feature_id => @feature.id).order(:feature_relation_type_id)
          if relation_counts.length > 0 %>
          <p>
          <strong><%= feature_label %></strong> has <strong class="relatedCountContainer"><%#= relation_counts %></strong> other places directly related to it, which are presented here. The relationships tab instead presents all subordinate and superordinate categories for <%= feature_label %>.
          </p>
        <p>
        <%=  link_to ts('tree.expand', :what => t('all.these')), '#', onclick: "expand_all_categories()", :class => "expand-all-categories expandable-link-contracted", :style => "font-weight:bold;font-variant:small-caps;" %>
        <%=  link_to ts('tree.collapse', :what => t('all.these')), '#', onclick: "collapse_all_categories()", :class => "collapse-all-categories expandable-link-expanded", :style => "font-weight:bold;font-variant:small-caps;display:none;" %>
        </p>
        <div class="places-in-places kmaps-list-columns related-features-categories has-ajax-pagination has-hash-feature-links">
          <%   relation_counts.each do |rc|
            feature_relation_type = rc.feature_relation_type
            feature_is_parent = rc.feature_is_parent
            count = rc.count %>
          <div class="feature-block">
          <h6><%= feature_label %> <%= "#{feature_is_parent ? feature_relation_type.label : feature_relation_type.asymmetric_label}" %> (<%= count %>):</h6>
          <%     # Is there a way to :include => categories and use an :order instead of this .sort{}?
            CachedFeatureRelationCategory.group('category_id').where(:feature_id => @feature.id, :feature_relation_type_id => feature_relation_type.id, :feature_is_parent => feature_is_parent).count.sort do |a,b|
            # Some of these .finds are returning nil, but it's not clear why.
            SubjectsIntegration::Feature.find(a[0]).nil? || SubjectsIntegration::Feature.find(b[0]).nil? ? 0 : SubjectsIntegration::Feature.find(a[0]).header.casecmp(SubjectsIntegration::Feature.find(b[0]).header)
          end.each do |c|
            category_id, count = c
            category = SubjectsIntegration::Feature.find(category_id)
            # This has returned nil in some cases on production, so we need to check it to prevent a fatal error below
            unless category.nil?
              div_id = "list_#{category_id}_#{feature_relation_type.id}_#{feature_is_parent}" %>
            <ul>
              <li>
              <%=        link_to SubjectsIntegration::Feature.find(category_id).header, related_list_feature_path(@feature.id, :category_id => category_id, :feature_relation_type_id => feature_relation_type.id, :feature_is_parent => feature_is_parent.to_s),
                :remote => true, :id => "link_#{div_id}", :class => 'expandable-link-contracted' %>
             (<%= count %>)
             <ul>
            <div id="<%= div_id %>" style="display:none;" class="related-feature-list pagination-click-results"></div>
            <%=        javascript_tag("$('#link_#{div_id}').bind('ajax:beforeSend', function(){ if(!on_category_click('#{div_id}')) return false; });") %>
             </ul>
              </li>
            </ul>
          <%       end
          end %>
          </div> <!-- END - feature-block -->
          <% end %>
        </div>
        <br />
        <p>
        <%= link_to ts('tree.expand', :what => t('all.these')), '#', onclick: "expand_all_categories()", :class => "expand-all-categories expandable-link-contracted", :style => "font-weight:bold;font-variant:small-caps;" %>
        <%= link_to ts('tree.collapse', :what => t('all.these')), '#', onclick: "collapse_all_categories()", :class => "collapse-all-categories expandable-link-expanded", :style => "font-weight:bold;font-variant:small-caps;display:none;" %>
        </p>
      <% else %>
        <p><%= ts 'snippet.feature.not.related' %></p>
      <% end %>
        </div> <!-- END panel-body -->
      </section> <!-- END panel -->
		</div>
	</div> <!-- Tab Panes end -->
</div> <!-- myTabs end -->

<%= javascript_include_tag 'kmaps_engine/kmaps_fancytree' %>
<%= javascript_on_load do %>
  $('#summary-tab-link[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    // Functionality for columnizer
    // dontsplit = don't break these headers
    $('.places-in-places').find('.column > h6, .column > ul > li, .column ul').addClass("dontsplit");
    // dontend = don't end column with headers
    $('.places-in-places').find('.column > h6, .column > ul > li').addClass("dontend");
    $('.places-in-places').find('.feature-block').addClass("dontsplit");
    $('.kmaps-list-columns:not(.subjects-in-places):not(.already_columnized)').addClass('already_columnized').columnize({
    width: 330,
    lastNeverTallest : true,
    buildOnce: true
    });
  });
  // END - Functionality for columnizer

  $("#relation_tree_container").kmapsFancytree({
    featureId: "<%= @feature.fid %>",
    termIndex: "<%= Feature.config.url %>",
    assetIndex: "<%= Flare.config.asset_url %>",
    perspective: "<%= current_perspective.code %>",
    tree: "<%= Feature.uid_prefix %>", //places
    domain: "<%= Feature.uid_prefix %>", //places
    seedTree: {
      descendants: true,
      directAncestors: false,
    },
    displayPopup: true
  });
<% end %>
